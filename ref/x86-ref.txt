A subset of the x86-64 language:

Reg   => rsp | rbp | rax | rbx | rcx | rdx | rsi | rdi
       | r8 | r9 | r10 | r11 | r12 | r13 | r14 | r15
Arg   => $Int | %Reg | Int(%Reg)
Instr => addq Arg Arg | subq Arg Arg | negq Arg | movq Arg Arg
       | callq Label | pushq Arg | popq Arg | retq | jmp Label
       | Label: Instr
Prog  => Prelude
         Label: Instr+

We target a Racket representation of this language, and then print the
results as valid x86-64 programs:

Reg   => rsp | rbp | rax | rbx | rcx | rdx | rsi | rdi
       | r8 | r9 | r10 | r11 | r12 | r13 | r14 | r15
Arg   => (int Int) | (reg Reg) | (deref Reg Int)
Instr => (addq Arg Arg) | (subq Arg Arg) | (negq Arg)
       | (movq Arg Arg) | (callq Label) | (pushq Arg) | (popq Arg)
       | (retq) | (jmp Label)
Block => (block Info Instr+)
Prog  => (prog Info ((Label . Block)+))
